# -*- coding: utf-8 -*-
"""Alice_EfficientNet_4Classes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jA0UNd07sp4jM8Qb1-QRM5SOJTd0JX7d
"""

# app.py

import streamlit as st
import numpy as np
import os
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import pandas as pd

# === Konfigurasi Streamlit ===
st.set_page_config(page_title="Klasifikasi Penyakit Kulit", layout="centered")
st.title("üî¨ Klasifikasi Gambar Penyakit Kulit")
st.write("Unggah gambar kulit dan dapatkan prediksi apakah itu eksim, kurap, atau kondisi lainnya.")

# === Unduh Model dari Google Drive ===
MODEL_PATH = "best_model_EfficientNetB0_V001.keras"
GDRIVE_FILE_ID = "1CGx0GKDY0YCodg2iZxz5rflrqTogME5r"

if not os.path.exists(MODEL_PATH):
    with st.spinner("üì• Mengunduh model dari Google Drive..."):
        gdown.download(id=GDRIVE_FILE_ID, output=MODEL_PATH, quiet=False)

# === Load Model ===
model = load_model(MODEL_PATH)

# === Label Kelas === (ubah sesuai urutan saat model dilatih)
CLASS_NAMES = ['Eksim', 'Kurap', 'Normal']  # Ubah sesuai dengan label sebenarnya

# === Fungsi Prediksi ===
def predict(img):
    img = img.resize((224, 224))  # ukuran input untuk EfficientNetB0
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0  # normalisasi

    preds = model.predict(img_array)
    class_idx = np.argmax(preds)
    confidence = float(np.max(preds)) * 100
    return CLASS_NAMES[class_idx], confidence

# === Sidebar Dokumentasi ===
with st.sidebar:
    st.title("üìÑ Dokumentasi")
    st.markdown("""
    **Kelas yang dideteksi:**
    - Eksim
    - Kurap
    - Normal

    **Cara penggunaan:**
    1. Unggah gambar kulit.
    2. Klik tombol **Prediksi**.
    3. Lihat hasil prediksi dan tingkat kepercayaannya.

    _Model: EfficientNetB0_
    """)

# === Logging prediksi ===
log_data = []

def log_prediction(filename, label, confidence):
    log_data.append({"filename": filename, "label": label, "confidence": confidence})
    df = pd.DataFrame(log_data)
    df.to_csv('predictions_log.csv', index=False)

# === Upload Gambar ===
uploaded_file = st.file_uploader("Unggah gambar (jpg/jpeg/png)", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="Gambar yang diunggah", use_column_width=True)

    if st.button("üîç Prediksi"):
        label, confidence = predict(img)
        st.success(f"**Hasil Prediksi: {label} ({confidence:.2f}%)**")
        log_prediction(uploaded_file.name, label, confidence)

        st.subheader("üìã Histori Prediksi")
        if os.path.exists('predictions_log.csv'):
            log_df = pd.read_csv('predictions_log.csv')
            st.dataframe(log_df)

# === Batch prediksi ZIP ===
st.subheader("üìÇ Batch Prediksi (ZIP)")
batch_file = st.file_uploader("Unggah file ZIP berisi gambar kulit", type=["zip"])

if batch_file is not None:
    import zipfile
    from io import BytesIO
    
    with zipfile.ZipFile(BytesIO(batch_file.read())) as archive:
        image_files = [f for f in archive.namelist() if f.endswith(('jpg', 'jpeg', 'png'))]
        for image_file in image_files:
            with archive.open(image_file) as img_file:
                img = Image.open(img_file).convert("RGB")
                label, confidence = predict(img)
                st.write(f"{image_file}: {label} ({confidence:.2f}%)")






